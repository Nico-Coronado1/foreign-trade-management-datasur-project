{"ast":null,"code":"var _jsxFileName = \"/home/nicolas/Desktop/foreign-trade-management/frontend/src/context/AppContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_PRODUCT_SUCCESS':\n      console.log(action.payload);\n      return {\n        ...state,\n        products: action.payload\n      };\n    case 'FETCH_TYPES_SUCCESS':\n      return {\n        ...state,\n        types: action.payload\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'CREATE_PRODUCT':\n      return {\n        ...state\n      };\n    case \"CHANGE_TO_EXPORT_LIST_BY_TYPE\":\n      if (!action.payload) {\n        return state;\n      }\n      // solo cambiar a los productos que no tengan valor en el campo exportedQuantity.\n      // let updateToExportListByType = state.products.filter((product) =>)\n      return {\n        ...state\n      };\n    case \"CHANGE_EXPORTED_LIST_BY_TYPE\":\n      if (!action.payload) {\n        return state;\n      }\n      // solo cambiar sacar los que tiene numero en el campo exportedQuantity\n      let updatedExportedListByType = state.products.filter(product => product.type === action.payload);\n      return {\n        ...state,\n        products: updatedExportedListByType\n      };\n    case \"EXPORT_PRODUCT\":\n      let newTotal = state.total;\n      let newTotalProducts = state.totalProducts;\n      let newProductsBought = state.productsBought;\n      const updatedProducts = state.products.map(product => {\n        if (product.name === action.payload) {\n          newTotalProducts--;\n          newProductsBought++;\n          newTotal += product.price;\n          return {\n            ...product,\n            quantity: product.quantity - 1\n          };\n        }\n        return product;\n      });\n      return {\n        ...state,\n        total: newTotal,\n        totalProducts: newTotalProducts,\n        productsBought: newProductsBought,\n        products: updatedProducts\n      };\n    default:\n      return state;\n  }\n};\n_c = AppReducer;\nconst initialState = {\n  error: null,\n  types: [],\n  ExportedProducts: 0,\n  products: []\n};\nexport const AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = props => {\n  _s();\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('products/api/products');\n        const data = await response.json();\n        dispatch({\n          type: 'FETCH_PRODUCT_SUCCESS',\n          payload: data.products\n        });\n      } catch (error) {\n        dispatch({\n          type: 'FETCH_FAILURE',\n          payload: error.message\n        });\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('types/api/types');\n        const data = await response.json();\n        dispatch({\n          type: 'FETCH_TYPES_SUCCESS',\n          payload: data.types\n        });\n      } catch (error) {\n        dispatch({\n          type: 'FETCH_FAILURE',\n          payload: error.message\n        });\n      }\n    };\n    fetchData();\n  }, []);\n  let exportedProducts = state.products.reduce((total, product) => total + product.exported_quantity, 0);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      products: state.products,\n      dispatch,\n      exportedProducts: exportedProducts,\n      countries: state.countries,\n      types: state.types\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c2 = AppProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useReducer","jsxDEV","_jsxDEV","AppReducer","state","action","type","console","log","payload","products","types","error","updatedExportedListByType","filter","product","newTotal","total","newTotalProducts","totalProducts","newProductsBought","productsBought","updatedProducts","map","name","price","quantity","_c","initialState","ExportedProducts","AppContext","AppProvider","props","_s","dispatch","fetchData","response","fetch","data","json","message","exportedProducts","reduce","exported_quantity","Provider","value","countries","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/nicolas/Desktop/foreign-trade-management/frontend/src/context/AppContext.js"],"sourcesContent":["import React, {createContext, useEffect, useReducer} from 'react';\n\nexport const AppReducer = (state, action) => {\n    switch (action.type){\n        case 'FETCH_PRODUCT_SUCCESS':\n            console.log(action.payload)\n            return {...state, products: action.payload}\n        case 'FETCH_TYPES_SUCCESS':\n            return {...state, types: action.payload}\n        case 'FETCH_FAILURE':\n            return {...state, error: action.payload}\n        case 'CREATE_PRODUCT':\n            return {...state}\n        case \"CHANGE_TO_EXPORT_LIST_BY_TYPE\":\n            if (!action.payload){\n                return state\n            }\n            // solo cambiar a los productos que no tengan valor en el campo exportedQuantity.\n            // let updateToExportListByType = state.products.filter((product) =>)\n            return {...state}\n        case \"CHANGE_EXPORTED_LIST_BY_TYPE\":\n            if (!action.payload){\n                return state\n            }\n            // solo cambiar sacar los que tiene numero en el campo exportedQuantity\n            let updatedExportedListByType = state.products.filter((product) => product.type === action.payload)\n            return{\n                ...state,\n                products: updatedExportedListByType\n            };\n        case \"EXPORT_PRODUCT\":\n            let newTotal = state.total\n            let newTotalProducts = state.totalProducts\n            let newProductsBought = state.productsBought\n            const updatedProducts = state.products.map((product) =>{\n                if(product.name === action.payload){\n                    newTotalProducts--\n                    newProductsBought++\n                    newTotal += product.price\n                    return {\n                        ...product,\n                        quantity: product.quantity - 1\n                    }\n                }\n                return product\n            })\n            return {\n                ...state,\n                total: newTotal,\n                totalProducts: newTotalProducts,\n                productsBought: newProductsBought,\n                products: updatedProducts,\n                    }\n        default:\n            return state\n    }\n}\n\nconst initialState = {\n    error: null,\n    types:[],\n    ExportedProducts: 0,\n    products: [],\n};\n\nexport const AppContext = createContext();\nexport const AppProvider = (props) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n    useEffect(() => {\n        const fetchData = async () => {\n        try {\n            const response = await fetch('products/api/products');\n            const data = await response.json();\n            dispatch({ type: 'FETCH_PRODUCT_SUCCESS', payload: data.products });\n        } catch (error) {\n            dispatch({ type: 'FETCH_FAILURE', payload: error.message });\n            }\n        };\n        fetchData();\n    }, []);\n   useEffect(() => {\n        const fetchData = async () => {\n        try {\n            const response = await fetch('types/api/types');\n            const data = await response.json();\n            dispatch({ type: 'FETCH_TYPES_SUCCESS', payload: data.types });\n        } catch (error) {\n            dispatch({ type: 'FETCH_FAILURE', payload: error.message });\n            }\n        };\n        fetchData();\n    }, []);\n\n    let exportedProducts = state.products.reduce((total, product) => total + product.exported_quantity, 0);\n    return (\n        <AppContext.Provider\n            value={{\n                products: state.products,\n                dispatch,\n                exportedProducts: exportedProducts,\n                countries: state.countries,\n                types: state.types\n            }}\n        >\n            {props.children}\n        </AppContext.Provider>\n    );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}